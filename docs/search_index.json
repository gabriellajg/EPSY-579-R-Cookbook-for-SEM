[["index.html", "EPSY:579 R Cookbook for SEM Chapter 1 Course", " EPSY:579 R Cookbook for SEM Gabriella Jiang QUERIES, University of Illinois at Urbana-Champaign Chapter 1 Course Structural Equation Modeling (SEM) is a general class of multivariate techniques that models relationships between latent variables and observed variables (“measurement models”) and relationships among latent variables (“structural models”) simultaneously. Students will learn the theoretical background of SEM as well as the techniques using programming language R. Topics covered in this class include mediation/moderation model; confirmatory factor analysis; model fit evaluation; multi-group SEM; latent growth modeling; MTMM model; and SEM with categorical variables. 4 graduate hours. No professional credit. Prerequisite: EPSY 580 and EPSY 581; or Equivalents. This site is supposed to serve as a repository for R codes used in lab sessions of this course in Spring 2022. *Disclaimer: Opinions are my own and not the views of my employer "],["r-exercises.html", "Chapter 2 R Exercises", " Chapter 2 R Exercises "],["week4_1-lavaan-lab-1-path-analysis-model.html", "Chapter 3 Week4_1: Lavaan Lab 1 Path Analysis Model 3.1 Reading-In and Working With Realistic Datasets In R 3.2 Sample Covariance Matrices using the cov() function 3.3 Installing Packages 3.4 Loading Packages (Libraries) That You Have Installed 3.5 Using Lavaan For Path Models 3.6 Plotting SEM model 3.7 Exercise: How would you fit the model in Saunders et al. (2016)?", " Chapter 3 Week4_1: Lavaan Lab 1 Path Analysis Model In this lab, we will learn how to: install a package called lavaan in R perform path analysis using the lavaan package 3.1 Reading-In and Working With Realistic Datasets In R 3.1.0.1 To begin, we will read the file that we will use for our SEM lab (eatingDisorderSimData.csv). Try running this function, as written: file.choose() Using the GUI (graphical user interface) window that pops up, select the file eatingDisorderSimData.csv This should produce a file path like this (note: below is a Mac version): /Your/File/Path/eatingDisorderSimData.csv You can copy this path into the read.csv and put it in the file = argument of the function: read.csv() is a function for reading in .csv files. Assign the name labData to the dataset in R using &lt;- labData &lt;- read.csv(file = &quot;/Users/gejiang/Box Sync/MacSync/Teaching/590SEM/Spring 2022/Week 4/R/eatingDisorderSimData.csv&quot;, header = TRUE) Important Argument: header = if header = TRUE, indicates that your dataset has column names that are to be read in separate from the data. if header = FALSE, indicates that your dataset does NOT have column names, and therefore the first row of the dataset should be read as data. 3.1.0.2 Or you could NEST the file.choose() function inside the read.csv function labData &lt;- read.csv(file = file.choose(), header = T) Because file.choose() returns the file path, putting this inside the read.csv function is the same as writing the path inside the function! 3.1.0.3 Pros and Cons of writing the full file path vs. using read.csv(file = file.choose(), header = T) If you write down the full file path and put it in the function, then the next time you run this R script you can easily read in your data without searching through your directories and folders. However, if you move your file to a different folder in the future, you’ll need to change the directory path in your R script. file.choose() is very easy and user-friendly. Using this method allows you to find your datafile even if you’ve moved it to a different folder. However, it is slightly more effortful to go in and select your folder each time. 3.1.0.4 Gabriella recommends: Set your working directory to the directory that contains the dataset, and simply load your data by typing the name of the .csv file: setwd(&quot;~/Box Sync/MacSync/Teaching/590SEM/Spring 2022/Week 4/R&quot;) labData &lt;- read.csv(file = &quot;eatingDisorderSimData.csv&quot;, header = T, sep = &quot;,&quot;) This serves to save all your future analyses in your working directory. read.csv() is related to a broader function called read.table. The read.table function has a sep = argument sep = If sep = “,” this indicates a comma-separated (.csv) file If sep = ” ” this indicates a tab-delimited (“white space” delimited) file, such as a .txt 3.1.0.5 Finally, point and click always works… library(readr) eatingDisorderSimData &lt;- read_csv(&quot;eatingDisorderSimData.csv&quot;) View(eatingDisorderSimData) 3.2 Sample Covariance Matrices using the cov() function 3.2.0.1 Quick review: str(labData) #structure ## &#39;data.frame&#39;: 1339 obs. of 7 variables: ## $ BMI : num 0.377 0.302 -1.098 -1.13 -2.797 ... ## $ SelfEsteem : num 0.0685 -0.3059 1.4755 -0.1329 1.3538 ... ## $ Accu : num 1.782 0.491 -0.682 2.224 0.892 ... ## $ DietSE : num -0.0544 -2.3957 0.168 1.1851 0.5131 ... ## $ Restrictive: num -0.525 2.067 0.364 -1.656 0.743 ... ## $ Bulimia : num 0.432 0.196 -1.434 -0.675 -0.858 ... ## $ Risk : num 0.508 0.91 -0.777 -0.554 -0.314 ... head(labData) #first few lines ## BMI SelfEsteem Accu DietSE Restrictive Bulimia Risk ## 1 0.3769721 0.0685226 1.7822103 -0.05436952 -0.5251424 0.4322272 0.50794715 ## 2 0.3015484 -0.3058876 0.4909857 -2.39569010 2.0671867 0.1959765 0.90996098 ## 3 -1.0980232 1.4754543 -0.6819827 0.16801384 0.3638750 -1.4337656 -0.77678045 ## 4 -1.1304059 -0.1329290 2.2235223 1.18505959 -1.6557519 -0.6748446 -0.55411733 ## 5 -2.7965343 1.3537804 0.8922687 0.51311551 0.7431860 -0.8575733 -0.31385631 ## 6 0.7205735 -1.9361462 -1.0307704 0.79749119 -1.8609143 0.3290163 0.08012833 colnames(labData) #column names ## [1] &quot;BMI&quot; &quot;SelfEsteem&quot; &quot;Accu&quot; &quot;DietSE&quot; &quot;Restrictive&quot; &quot;Bulimia&quot; &quot;Risk&quot; How many observations are in this dataset? Number of observations = number of rows, with 1 person per row nrow(labData) #1339 ## [1] 1339 let’s save this number as n n &lt;- nrow(labData) Let’s look at the sample covariance matrix of these variables using the cov() function: cov(labData) ## BMI SelfEsteem Accu DietSE Restrictive Bulimia Risk ## BMI 1.07399214 -0.1380786 -0.02076620 -0.10688665 -0.13056197 0.16177119 0.07938074 ## SelfEsteem -0.13807862 1.0021547 0.03501750 0.10557111 -0.11991676 -0.31717764 -0.22864713 ## Accu -0.02076620 0.0350175 0.97176431 -0.02069863 -0.09050653 -0.09549788 -0.10327073 ## DietSE -0.10688665 0.1055711 -0.02069863 0.96607293 -0.15678475 -0.21922044 0.07119772 ## Restrictive -0.13056197 -0.1199168 -0.09050653 -0.15678475 1.01695732 0.58684522 0.78960193 ## Bulimia 0.16177119 -0.3171776 -0.09549788 -0.21922044 0.58684522 1.03637890 0.87337921 ## Risk 0.07938074 -0.2286471 -0.10327073 0.07119772 0.78960193 0.87337921 1.05356717 let’s save this sample cov as capital S: S = cov(labData) If we wanted, we could look at a subset of the dataset, e.g.,: cov(labData[,c(&quot;BMI&quot;, &quot;SelfEsteem&quot;, &quot;Accu&quot;)]) ## BMI SelfEsteem Accu ## BMI 1.0739921 -0.1380786 -0.0207662 ## SelfEsteem -0.1380786 1.0021547 0.0350175 ## Accu -0.0207662 0.0350175 0.9717643 This is often useful if our analysis will only contain certain variables. If only two variables: cov(labData$BMI, labData$SelfEsteem) ## [1] -0.1380786 If only one variable (variance): cov(labData$BMI, labData$BMI) ## [1] 1.073992 3.3 Installing Packages We will mostly be using the lavaan package to perform SEM analyses, so let’s use the install.packages() function to install it first install.packages(&quot;lavaan&quot;) lavaan stands for LAtent VAriable ANalysis using R. lavaan website: http://lavaan.ugent.be Check out the tutorials and examples! 3.4 Loading Packages (Libraries) That You Have Installed AFTER YOU’VE INSTALLED A PACKAGE ONE TIME, YOU DON’T HAVE TO EVER INSTALL IT AGAIN, UNLESS YOU DELETE AND REINSTALL R FOR SOME REASON. HOWEVER, NOW THAT THESE FUNCTIONS ARE INSTALLED IN R ON YOUR MACHINE, YOU MUST LOAD THE LIBRARY EVERY TIME YOU OPEN R AND WISH TO USE IT. To do this, use the library() function: library(lavaan) This is lavaan 0.6-9 lavaan is FREE software! Please report any bugs. Don’t worry about the “BETA” warning, this package is awesome! This may seem like a pain, but roll with it. The good news is that once you do it, you have access to a whole library of SEM functions. If you boot up R and receive error msgs like “could not find function”sem”” IT IS PROBABLY BECAUSE YOU HAVEN’T LOADED THE lavaan PACKAGE. Check out the help page of a particular function, say sem(): help(sem) ?sem 3.5 Using Lavaan For Path Models Every analysis in lavaan has three main parts. Part I: Writing the Model Syntax Part II: Analyzing the Model Using Your Dataset Part III: Examining the results. 3.5.1 PART I: Follow the set of equations we wrote in class: Self-Efficacy = BMI + Self-Esteem + Disturbance Bulimic Symptoms = BMI + Self-Esteem + Self-Efficacy + Disturbance Restrictive Symptoms = BMI + Self-Esteem + Self-Efficacy + Disturbance Overall Risk = BMI + Self-Esteem + Self-Efficacy + Acculturation + Disturbance Let’s write some model syntax: ex1PathSyntax &lt;- &quot; #opening a quote # Tilda ~ : Regression # M ~ X regression (X predicts M) # Each line corresponds to an equation # Disturbance is automatically included for each regression # (i.e. no extra term needed) DietSE ~ BMI + SelfEsteem #DietSE is predicted by BMI and SelfEsteem Bulimia ~ DietSE + BMI + SelfEsteem Restrictive ~ DietSE + BMI + SelfEsteem Risk ~ DietSE + BMI + SelfEsteem + Accu &quot; Things to note here: We are calling our saved model syntax object ex1PathSyntax We assign it using &lt;- as usual Then we open a quotation ” Then we write each part of the model on separate lines. Then we close the quotation ” The variables names need to match those in the dataset (case matters!) Add comments inside the model syntax using hashtag 3.5.2 PART II Let’s run our model! To run this model, we will start by using the sem() function. Sensible defaults for estimating CFA models like assumptions of linear regression, so we don’t actually have to write some constraints into the model above Alternatively, one can use lavaan() function [with the fewest default settings] or cfa() function [with similar defaults as sem() function] To use lavaan(), you have to specify all 22 parameters in the model. 3.5.2.1 ex1fit You can run the sem() function using two different sources of data: The raw dataset, using: sem(model = modelSyntax, data = yourDataset) example: ex1fit &lt;- sem(model = ex1PathSyntax, data = labData) If you encounter errors like: Error in if ((!is.matrix(model)) | ncol(model) != 3) stop(“model argument must be a 3-column matrix”) : argument is of length zero IT IS PROBABLY BECAUSE YOU HAVEN’T LOADED THE lavaan PACKAGE. To make sure you are using the sem() function from the lavaan package, add PackageName:: before a function: ex1fit &lt;- lavaan::sem(model = ex1PathSyntax, data = labData) Then we can obtain complete results using the summary() function: summary(ex1fit) ## lavaan 0.6-10 ended normally after 36 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 19 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 16.429 ## Degrees of freedom 3 ## P-value (Chi-square) 0.001 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.088 0.026 -3.381 0.001 ## SelfEsteem 0.093 0.027 3.480 0.001 ## Bulimia ~ ## DietSE -0.185 0.026 -6.994 0.000 ## BMI 0.096 0.025 3.796 0.000 ## SelfEsteem -0.284 0.026 -10.871 0.000 ## Restrictive ~ ## DietSE -0.166 0.027 -6.039 0.000 ## BMI -0.154 0.026 -5.892 0.000 ## SelfEsteem -0.123 0.027 -4.561 0.000 ## Risk ~ ## DietSE 0.105 0.028 3.766 0.000 ## BMI 0.055 0.027 2.057 0.040 ## SelfEsteem -0.232 0.028 -8.425 0.000 ## Accu 0.007 0.009 0.783 0.434 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Bulimia ~~ ## .Restrictive 0.536 0.029 18.389 0.000 ## .Risk 0.814 0.034 23.983 0.000 ## .Restrictive ~~ ## .Risk 0.785 0.034 22.996 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.946 0.037 25.875 0.000 ## .Bulimia 0.890 0.034 25.875 0.000 ## .Restrictive 0.955 0.037 25.875 0.000 ## .Risk 0.989 0.038 25.875 0.000 The covariance matrix, using: sem(model = modelSyntax, sample.cov = yourCovarianceMatrix, sample.nobs = numberOfObservationsInYourDataset) This is to illustrate that WITH COMPLETE DATA, you can run SEM analyses using only covariances as input and obtain the same results as with raw data! This positions SEM for meta-analysis and replication studies. example: ex1fit_S &lt;- lavaan::sem(model = ex1PathSyntax, sample.cov = S, sample.nobs = n) summary(ex1fit_S) ## lavaan 0.6-10 ended normally after 36 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 19 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 16.429 ## Degrees of freedom 3 ## P-value (Chi-square) 0.001 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.088 0.026 -3.381 0.001 ## SelfEsteem 0.093 0.027 3.480 0.001 ## Bulimia ~ ## DietSE -0.185 0.026 -6.994 0.000 ## BMI 0.096 0.025 3.796 0.000 ## SelfEsteem -0.284 0.026 -10.871 0.000 ## Restrictive ~ ## DietSE -0.166 0.027 -6.039 0.000 ## BMI -0.154 0.026 -5.892 0.000 ## SelfEsteem -0.123 0.027 -4.561 0.000 ## Risk ~ ## DietSE 0.105 0.028 3.766 0.000 ## BMI 0.055 0.027 2.057 0.040 ## SelfEsteem -0.232 0.028 -8.425 0.000 ## Accu 0.007 0.009 0.783 0.434 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Bulimia ~~ ## .Restrictive 0.536 0.029 18.389 0.000 ## .Risk 0.814 0.034 23.983 0.000 ## .Restrictive ~~ ## .Risk 0.785 0.034 22.996 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.946 0.037 25.875 0.000 ## .Bulimia 0.890 0.034 25.875 0.000 ## .Restrictive 0.955 0.037 25.875 0.000 ## .Risk 0.989 0.038 25.875 0.000 The . before a variable name refers to its disturbance. e.g., .Bulimia refers to the disturbance of Bulimia, not Bulimia itself You should get exactly the same output in ex1fit and ex1fit_S. Wait, Gabriella, the df is not 6…. This is because sem() by default assumes that disturbances of endogenous variables covary among themselves (which, in our model, are not correlated at all!) The estimates of disturbance covariances are presented under “Covariances” in the output: Covariances: Estimate Std.Err z-value P(&gt;|z|) .Bulimia ~~ .Restrictive 0.536 0.029 18.389 0.000 .Risk 0.814 0.034 23.983 0.000 .Restrictive ~~ .Risk 0.785 0.034 22.996 0.000 3.5.2.2 ex1PathSyntax_noCov To change those defaults, one needs to explicitly fix those disturbance covariances at 0 (this is a strong assumption, I know…): http://lavaan.ugent.be/tutorial/syntax2.html ex1PathSyntax_noCov &lt;- &quot; #opening a quote # ~~ indicates a two-headed arrow (variance or covariance) # 0* in front of the 2nd variable fixes the covariance at 0 DietSE ~ BMI + SelfEsteem #DietSE is predicted by BMI and SelfEsteem Bulimia ~ DietSE + BMI + SelfEsteem Restrictive ~ DietSE + BMI + SelfEsteem Risk ~ DietSE + BMI + SelfEsteem + Accu #Disturbance covariances (fixed at 0): DietSE ~~ 0*Bulimia DietSE ~~ 0*Restrictive DietSE ~~ 0*Risk Bulimia ~~ 0*Restrictive Bulimia ~~ 0*Risk Restrictive ~~ 0*Risk # These lines above say that there is no covariance among the disturbances of all endogenous variables &quot; ex1fit_noCov &lt;- lavaan::sem(model = ex1PathSyntax_noCov, data = labData) summary(ex1fit_noCov) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 16 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 3536.813 ## Degrees of freedom 6 ## P-value (Chi-square) 0.000 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.088 0.026 -3.381 0.001 ## SelfEsteem 0.093 0.027 3.480 0.001 ## Bulimia ~ ## DietSE -0.185 0.026 -6.994 0.000 ## BMI 0.096 0.025 3.796 0.000 ## SelfEsteem -0.284 0.026 -10.871 0.000 ## Restrictive ~ ## DietSE -0.166 0.027 -6.039 0.000 ## BMI -0.154 0.026 -5.892 0.000 ## SelfEsteem -0.123 0.027 -4.561 0.000 ## Risk ~ ## DietSE 0.102 0.028 3.686 0.000 ## BMI 0.053 0.026 2.000 0.045 ## SelfEsteem -0.228 0.027 -8.332 0.000 ## Accu -0.095 0.027 -3.449 0.001 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE ~~ ## .Bulimia 0.000 ## .Restrictive 0.000 ## .Risk 0.000 ## .Bulimia ~~ ## .Restrictive 0.000 ## .Risk 0.000 ## .Restrictive ~~ ## .Risk 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.946 0.037 25.875 0.000 ## .Bulimia 0.890 0.034 25.875 0.000 ## .Restrictive 0.955 0.037 25.875 0.000 ## .Risk 0.979 0.038 25.875 0.000 df = 6 and Covariances: Estimate Std.Err z-value P(&gt;|z|) .DietSE ~~ .Bulimia 0.000 .Restrictive 0.000 .Risk 0.000 .Bulimia ~~ .Restrictive 0.000 .Risk 0.000 .Restrictive ~~ .Risk 0.000 Wait, where are the variances and covariances of exogenous variables? They are not included in the output because they are estimated PERFECTLY 3.5.2.3 ex1fit_noCov_freeX fixed.x=FALSE asks for the variances/covariances/means of the exogenous variables to be freely estimated instead of being fixed at the values found from the sample This usually makes no difference from ex1fit_noCov, except that it prints more lines ex1fit_noCov_freeX &lt;- lavaan::sem(model = ex1PathSyntax_noCov, data = labData, fixed.x = FALSE) summary(ex1fit_noCov_freeX) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 22 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 3536.813 ## Degrees of freedom 6 ## P-value (Chi-square) 0.000 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.088 0.026 -3.381 0.001 ## SelfEsteem 0.093 0.027 3.480 0.001 ## Bulimia ~ ## DietSE -0.185 0.026 -6.994 0.000 ## BMI 0.096 0.025 3.796 0.000 ## SelfEsteem -0.284 0.026 -10.871 0.000 ## Restrictive ~ ## DietSE -0.166 0.027 -6.039 0.000 ## BMI -0.154 0.026 -5.892 0.000 ## SelfEsteem -0.123 0.027 -4.561 0.000 ## Risk ~ ## DietSE 0.102 0.028 3.686 0.000 ## BMI 0.053 0.026 2.000 0.045 ## SelfEsteem -0.228 0.027 -8.332 0.000 ## Accu -0.095 0.027 -3.449 0.001 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE ~~ ## .Bulimia 0.000 ## .Restrictive 0.000 ## .Risk 0.000 ## .Bulimia ~~ ## .Restrictive 0.000 ## .Risk 0.000 ## .Restrictive ~~ ## .Risk 0.000 ## BMI ~~ ## SelfEsteem -0.138 0.029 -4.828 0.000 ## Accu -0.021 0.028 -0.744 0.457 ## SelfEsteem ~~ ## Accu 0.035 0.027 1.298 0.194 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.946 0.037 25.875 0.000 ## .Bulimia 0.890 0.034 25.875 0.000 ## .Restrictive 0.955 0.037 25.875 0.000 ## .Risk 0.979 0.038 25.875 0.000 ## BMI 1.073 0.041 25.875 0.000 ## SelfEsteem 1.001 0.039 25.875 0.000 ## Accu 0.971 0.038 25.875 0.000 3.5.2.4 ex1fit_noCov_lavaan As a bonus, here is how you would write the model syntax if you use lavaan() instead of sem()… ex1PathSyntax_lavaan &lt;- &quot; #opening a quote # ~~ indicates a two-headed arrow (variance or covariance) #regression coefficients (12) DietSE ~ BMI + SelfEsteem Bulimia ~ DietSE + BMI + SelfEsteem Restrictive ~ DietSE + BMI + SelfEsteem Risk ~ DietSE + BMI + SelfEsteem + Accu #variances of exogenous variables (3) BMI ~~ BMI SelfEsteem ~~ SelfEsteem Accu ~~ Accu #disturbance variances (4) DietSE ~~ DietSE Bulimia ~~ Bulimia Restrictive ~~ Restrictive Risk ~~ Risk #covariances among exogenous variables (3) BMI ~~ SelfEsteem BMI ~~ Accu SelfEsteem ~~ Accu #total: 22 parameters &quot; ex1fit_noCov_lavaan &lt;- lavaan(model = ex1PathSyntax_lavaan, data = labData) summary(ex1fit_noCov_lavaan) ## lavaan 0.6-10 ended normally after 11 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 22 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 3536.813 ## Degrees of freedom 6 ## P-value (Chi-square) 0.000 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.088 0.026 -3.381 0.001 ## SelfEsteem 0.093 0.027 3.480 0.001 ## Bulimia ~ ## DietSE -0.185 0.026 -6.994 0.000 ## BMI 0.096 0.025 3.796 0.000 ## SelfEsteem -0.284 0.026 -10.871 0.000 ## Restrictive ~ ## DietSE -0.166 0.027 -6.039 0.000 ## BMI -0.154 0.026 -5.892 0.000 ## SelfEsteem -0.123 0.027 -4.561 0.000 ## Risk ~ ## DietSE 0.102 0.028 3.686 0.000 ## BMI 0.053 0.026 2.000 0.045 ## SelfEsteem -0.228 0.027 -8.332 0.000 ## Accu -0.095 0.027 -3.449 0.001 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## BMI ~~ ## SelfEsteem -0.138 0.029 -4.828 0.000 ## Accu -0.021 0.028 -0.744 0.457 ## SelfEsteem ~~ ## Accu 0.035 0.027 1.298 0.194 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## BMI 1.073 0.041 25.875 0.000 ## SelfEsteem 1.001 0.039 25.875 0.000 ## Accu 0.971 0.038 25.875 0.000 ## .DietSE 0.946 0.037 25.875 0.000 ## .Bulimia 0.890 0.034 25.875 0.000 ## .Restrictive 0.955 0.037 25.875 0.000 ## .Risk 0.979 0.038 25.875 0.000 which yields the same output as ex1fit_noCov_freeX. 3.5.3 Sigma Matrices Let’s have a look at the model-implied covarinace matrix from our final model ex1fit_noCov_freeX and save it as Sigma: fitted(ex1fit_noCov_freeX) ## $cov ## DietSE Bulimi Rstrct Risk BMI SlfEst Accu ## DietSE 0.965 ## Bulimia -0.219 1.036 ## Restrictive -0.157 0.051 1.016 ## Risk 0.069 0.060 0.005 1.052 ## BMI -0.107 0.162 -0.130 0.079 1.073 ## SelfEsteem 0.105 -0.317 -0.120 -0.228 -0.138 1.001 ## Accu 0.005 -0.013 -0.002 -0.101 -0.021 0.035 0.971 Sigma &lt;- fitted(ex1fit_noCov_freeX)$cov How close is Sigma to S? Rearrange the rows and columns of Sigma (important!) and take the difference diff = Sigma[colnames(S), colnames(S)] - S round(diff, 3) ## BMI SelfEsteem Accu DietSE Restrictive Bulimia Risk ## BMI -0.001 0.000 0.000 0.000 0.000 0.000 0.000 ## SelfEsteem 0.000 -0.001 0.000 0.000 0.000 0.000 0.000 ## Accu 0.000 0.000 -0.001 0.026 0.089 0.083 0.003 ## DietSE 0.000 0.000 0.026 -0.001 0.000 0.000 -0.002 ## Restrictive 0.000 0.000 0.089 0.000 -0.001 -0.536 -0.785 ## Bulimia 0.000 0.000 0.083 0.000 -0.536 -0.001 -0.814 ## Risk 0.000 0.000 0.003 -0.002 -0.785 -0.814 -0.001 How about the default model that include disturbance covariances? Sigma0 &lt;- fitted(ex1fit)$cov diff0 = Sigma0[colnames(S), colnames(S)] - S round(diff0, 3) ## BMI SelfEsteem Accu DietSE Restrictive Bulimia Risk ## BMI -0.001 0.000 0.000 0.000 0.000 0.000 0.000 ## SelfEsteem 0.000 -0.001 0.000 0.000 0.000 0.000 0.000 ## Accu 0.000 0.000 -0.001 0.026 0.089 0.083 0.101 ## DietSE 0.000 0.000 0.026 -0.001 0.000 0.000 0.000 ## Restrictive 0.000 0.000 0.089 0.000 -0.001 0.000 0.000 ## Bulimia 0.000 0.000 0.083 0.000 0.000 -0.001 0.000 ## Risk 0.000 0.000 0.101 0.000 0.000 0.000 0.001 3.5.3.1 Gabriella’s Practical Tips: To begin with, constraint the disturbance covariances to be 0 ; Keep the model if the model fits the data well; Relax the constraints the disturbance covariances if the initial model did not fit well. 3.5.4 PART III: Summarizing Our Analysis: There are some useful options we can ask for with summary(): summary(ex1fit_noCov_freeX, fit.measures = T) #include model fit measures summary(ex1fit_noCov_freeX, standardized = T) #This includes standardized estimates. std.all contains usual regression standardization. summary(ex1fit_noCov_freeX, ci = T) #Include confidence intervals # Add them all! If we JUST want the parameter estimates: parameterEstimates(ex1fit_noCov_freeX) ## lhs op rhs est se z pvalue ci.lower ci.upper ## 1 DietSE ~ BMI -0.088 0.026 -3.381 0.001 -0.138 -0.037 ## 2 DietSE ~ SelfEsteem 0.093 0.027 3.480 0.001 0.041 0.146 ## 3 Bulimia ~ DietSE -0.185 0.026 -6.994 0.000 -0.237 -0.133 ## 4 Bulimia ~ BMI 0.096 0.025 3.796 0.000 0.046 0.145 ## 5 Bulimia ~ SelfEsteem -0.284 0.026 -10.871 0.000 -0.335 -0.233 ## 6 Restrictive ~ DietSE -0.166 0.027 -6.039 0.000 -0.220 -0.112 ## 7 Restrictive ~ BMI -0.154 0.026 -5.892 0.000 -0.205 -0.103 ## 8 Restrictive ~ SelfEsteem -0.123 0.027 -4.561 0.000 -0.176 -0.070 ## 9 Risk ~ DietSE 0.102 0.028 3.686 0.000 0.048 0.157 ## 10 Risk ~ BMI 0.053 0.026 2.000 0.045 0.001 0.105 ## 11 Risk ~ SelfEsteem -0.228 0.027 -8.332 0.000 -0.282 -0.175 ## 12 Risk ~ Accu -0.095 0.027 -3.449 0.001 -0.149 -0.041 ## 13 DietSE ~~ Bulimia 0.000 0.000 NA NA 0.000 0.000 ## 14 DietSE ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 15 DietSE ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 16 Bulimia ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 17 Bulimia ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 18 Restrictive ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 19 DietSE ~~ DietSE 0.946 0.037 25.875 0.000 0.874 1.018 ## 20 Bulimia ~~ Bulimia 0.890 0.034 25.875 0.000 0.822 0.957 ## 21 Restrictive ~~ Restrictive 0.955 0.037 25.875 0.000 0.883 1.028 ## 22 Risk ~~ Risk 0.979 0.038 25.875 0.000 0.905 1.054 ## 23 BMI ~~ BMI 1.073 0.041 25.875 0.000 0.992 1.154 ## 24 BMI ~~ SelfEsteem -0.138 0.029 -4.828 0.000 -0.194 -0.082 ## 25 BMI ~~ Accu -0.021 0.028 -0.744 0.457 -0.075 0.034 ## 26 SelfEsteem ~~ SelfEsteem 1.001 0.039 25.875 0.000 0.926 1.077 ## 27 SelfEsteem ~~ Accu 0.035 0.027 1.298 0.194 -0.018 0.088 ## 28 Accu ~~ Accu 0.971 0.038 25.875 0.000 0.897 1.045 parameterEstimates(ex1fit_noCov_freeX, standardized = T) #include standardized solution.... ## lhs op rhs est se z pvalue ci.lower ci.upper std.lv std.all std.nox ## 1 DietSE ~ BMI -0.088 0.026 -3.381 0.001 -0.138 -0.037 -0.088 -0.092 -0.089 ## 2 DietSE ~ SelfEsteem 0.093 0.027 3.480 0.001 0.041 0.146 0.093 0.095 0.095 ## 3 Bulimia ~ DietSE -0.185 0.026 -6.994 0.000 -0.237 -0.133 -0.185 -0.179 -0.179 ## 4 Bulimia ~ BMI 0.096 0.025 3.796 0.000 0.046 0.145 0.096 0.097 0.094 ## 5 Bulimia ~ SelfEsteem -0.284 0.026 -10.871 0.000 -0.335 -0.233 -0.284 -0.279 -0.279 ## 6 Restrictive ~ DietSE -0.166 0.027 -6.039 0.000 -0.220 -0.112 -0.166 -0.162 -0.162 ## 7 Restrictive ~ BMI -0.154 0.026 -5.892 0.000 -0.205 -0.103 -0.154 -0.158 -0.153 ## 8 Restrictive ~ SelfEsteem -0.123 0.027 -4.561 0.000 -0.176 -0.070 -0.123 -0.122 -0.122 ## 9 Risk ~ DietSE 0.102 0.028 3.686 0.000 0.048 0.157 0.102 0.098 0.098 ## 10 Risk ~ BMI 0.053 0.026 2.000 0.045 0.001 0.105 0.053 0.053 0.052 ## 11 Risk ~ SelfEsteem -0.228 0.027 -8.332 0.000 -0.282 -0.175 -0.228 -0.223 -0.223 ## 12 Risk ~ Accu -0.095 0.027 -3.449 0.001 -0.149 -0.041 -0.095 -0.091 -0.092 ## 13 DietSE ~~ Bulimia 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 14 DietSE ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 15 DietSE ~~ Risk 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 16 Bulimia ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 17 Bulimia ~~ Risk 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 18 Restrictive ~~ Risk 0.000 0.000 NA NA 0.000 0.000 0.000 0.000 0.000 ## 19 DietSE ~~ DietSE 0.946 0.037 25.875 0.000 0.874 1.018 0.946 0.980 0.980 ## 20 Bulimia ~~ Bulimia 0.890 0.034 25.875 0.000 0.822 0.957 0.890 0.859 0.859 ## 21 Restrictive ~~ Restrictive 0.955 0.037 25.875 0.000 0.883 1.028 0.955 0.940 0.940 ## 22 Risk ~~ Risk 0.979 0.038 25.875 0.000 0.905 1.054 0.979 0.931 0.931 ## 23 BMI ~~ BMI 1.073 0.041 25.875 0.000 0.992 1.154 1.073 1.000 1.073 ## 24 BMI ~~ SelfEsteem -0.138 0.029 -4.828 0.000 -0.194 -0.082 -0.138 -0.133 -0.138 ## 25 BMI ~~ Accu -0.021 0.028 -0.744 0.457 -0.075 0.034 -0.021 -0.020 -0.021 ## 26 SelfEsteem ~~ SelfEsteem 1.001 0.039 25.875 0.000 0.926 1.077 1.001 1.000 1.001 ## 27 SelfEsteem ~~ Accu 0.035 0.027 1.298 0.194 -0.018 0.088 0.035 0.035 0.035 ## 28 Accu ~~ Accu 0.971 0.038 25.875 0.000 0.897 1.045 0.971 1.000 0.971 For standardized solutions, there is also this function: standardizedSolution(ex1fit_noCov_freeX, type = &quot;std.all&quot;) ## lhs op rhs est.std se z pvalue ci.lower ci.upper ## 1 DietSE ~ BMI -0.092 0.027 -3.395 0.001 -0.146 -0.039 ## 2 DietSE ~ SelfEsteem 0.095 0.027 3.496 0.000 0.042 0.148 ## 3 Bulimia ~ DietSE -0.179 0.025 -7.093 0.000 -0.228 -0.129 ## 4 Bulimia ~ BMI 0.097 0.026 3.811 0.000 0.047 0.148 ## 5 Bulimia ~ SelfEsteem -0.279 0.025 -11.284 0.000 -0.328 -0.231 ## 6 Restrictive ~ DietSE -0.162 0.026 -6.115 0.000 -0.213 -0.110 ## 7 Restrictive ~ BMI -0.158 0.027 -5.962 0.000 -0.210 -0.106 ## 8 Restrictive ~ SelfEsteem -0.122 0.027 -4.593 0.000 -0.175 -0.070 ## 9 Risk ~ DietSE 0.098 0.027 3.702 0.000 0.046 0.150 ## 10 Risk ~ BMI 0.053 0.027 2.003 0.045 0.001 0.106 ## 11 Risk ~ SelfEsteem -0.223 0.026 -8.536 0.000 -0.274 -0.172 ## 12 Risk ~ Accu -0.091 0.026 -3.462 0.001 -0.143 -0.039 ## 13 DietSE ~~ Bulimia 0.000 0.000 NA NA 0.000 0.000 ## 14 DietSE ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 15 DietSE ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 16 Bulimia ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 17 Bulimia ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 18 Restrictive ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 19 DietSE ~~ DietSE 0.980 0.008 129.769 0.000 0.965 0.995 ## 20 Bulimia ~~ Bulimia 0.859 0.018 48.727 0.000 0.824 0.894 ## 21 Restrictive ~~ Restrictive 0.940 0.013 74.768 0.000 0.915 0.965 ## 22 Risk ~~ Risk 0.931 0.013 69.534 0.000 0.904 0.957 ## 23 BMI ~~ BMI 1.000 0.000 NA NA 1.000 1.000 ## 24 BMI ~~ SelfEsteem -0.133 0.027 -4.958 0.000 -0.186 -0.080 ## 25 BMI ~~ Accu -0.020 0.027 -0.744 0.457 -0.074 0.033 ## 26 SelfEsteem ~~ SelfEsteem 1.000 0.000 NA NA 1.000 1.000 ## 27 SelfEsteem ~~ Accu 0.035 0.027 1.300 0.194 -0.018 0.089 ## 28 Accu ~~ Accu 1.000 0.000 NA NA 1.000 1.000 How does it work? ?standardizedSolution 3.6 Plotting SEM model # install.packages(&quot;semPlot&quot;) library(semPlot) # Plot! semPaths(ex1fit_noCov_freeX) # estimates instead of paths only semPaths(ex1fit_noCov_freeX, what=&#39;est&#39;, edge.label.cex=1.25, curvePivot = TRUE, fade=FALSE) # standardized solutions semPaths(ex1fit_noCov_freeX, what=&#39;std&#39;, edge.label.cex=1.25, curvePivot = TRUE, fade=FALSE) semPaths(ex1fit_noCov_freeX, what=&#39;est&#39;, rotation = 2, # default rotation = 1 with four options edge.label.cex=1.25, curvePivot = TRUE, fade=FALSE) 3.6.1 customize it your way semPaths(ex1fit_noCov_freeX, whatLabels=&quot;est&quot;, # plot model not parm ests rotation = 2, # default rotation = 1 with four options asize = 5, # arrows&#39; size esize = 2, # width of paths&#39; lines / curves edge.label.cex = 0.8, # font size of regr&#39;n coeffs sizeMan = 10, # font size of manifest variable names nCharNodes = 0, nCharEdges = 0, # don&#39;t limit variable name lengths fade = FALSE, # don&#39;t weight path width to reflect strength curvePivot = TRUE, # make straight edges instead of round ones curve = 2, # pull covariances&#39; curves out a little style = &quot;lisrel&quot;, # no variances vs. # &quot;ram&quot;&#39;s 2-headed for variances color = &quot;green&quot;, # color of variables edge.color = &quot;black&quot;, # color of edges/paths layout = &quot;tree2&quot;, # tree, spring, circle, circle2 residuals = TRUE) # residuals variances included in the path diagram semPaths(ex1fit_noCov_freeX, what=&#39;est&#39;, rotation = 2, # default rotation = 1 with four options curve = 2, # pull covariances&#39; curves out a little nCharNodes = 0, nCharEdges = 0, # don&#39;t limit variable name lengths sizeMan = 8, # font size of manifest variable names style = &quot;lisrel&quot;, # single-headed arrows vs. # &quot;ram&quot;&#39;s 2-headed for variances edge.label.cex=1.2, curvePivot = TRUE, fade=FALSE) 3.7 Exercise: How would you fit the model in Saunders et al. (2016)? "],["week4_2-lavaan-lab-2-mediation-and-indirect-effects.html", "Chapter 4 Week4_2: Lavaan Lab 2 Mediation and Indirect Effects 4.1 Reading-In and Working With Realistic Datasets In R 4.2 Using Lavaan For Mediation Models - Preacher &amp; Hayes’s 4.3 PART I: # Follow the two equations of M (DietSE) &amp; Y (Bulimia) 4.4 PART II Let’s run our model! 4.5 PART III: Summarizing Our Analysis: 4.6 PART IV: Bootstrap confidence intervals 4.7 In-Class Exercise: Use Lavaan to estimate and interpret the following model 4.8 Exercise: Eating Disorder Mediation Analysis", " Chapter 4 Week4_2: Lavaan Lab 2 Mediation and Indirect Effects In this lab, we will learn how to: perform a simple mediation analysis using Preacher &amp; Hayes (2004) + Bootstrap test mediation effects in the eating disorder path model 4.1 Reading-In and Working With Realistic Datasets In R If your data (eatingDisorderSimData.csv) is stored in you current working directory, then simply load your data by typing the name of the .csv file: labData &lt;- read.table(file = &quot;eatingDisorderSimData.csv&quot;, header = T, sep = &quot;,&quot;) Save the sample covariance matrix: S = cov(labData) 4.2 Using Lavaan For Mediation Models - Preacher &amp; Hayes’s Load the package: library(lavaan) Part I: Writing the Model Syntax Part II: Analyzing the Model Using Your Dataset Part III: Examining the results. 4.3 PART I: # Follow the two equations of M (DietSE) &amp; Y (Bulimia) Diet Self-Efficacy = BMI + Disturbance Bulimic Symptoms = BMI + Diet Self-Efficacy + Disturbance Let’s write some model syntax: ex1MediationSyntax &lt;- &quot; #opening a quote #Regressions DietSE ~ BMI #M ~ X regression (a path) Bulimia ~ BMI + DietSE #Y ~ X + M regression (c prime and b) &quot; No need to fix disturbance covariances in simple mediation as none was estimated 4.4 PART II Let’s run our model! let fixed.x=FALSE to print more lines ex1fit_freeX &lt;- lavaan::sem(model = ex1MediationSyntax, data = labData, fixed.x = FALSE) summary(ex1fit_freeX) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI -0.100 0.026 -3.861 0.000 ## Bulimia ~ ## BMI 0.129 0.026 4.960 0.000 ## DietSE -0.213 0.028 -7.725 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.955 0.037 25.875 0.000 ## .Bulimia 0.968 0.037 25.875 0.000 ## BMI 1.073 0.041 25.875 0.000 note that there are six parameter estimates and df = 0. But the output does not include the mediation effect a*b? 4.4.1 Label the mediation effect Let’s learn how to label parameters great tutorial example: http://lavaan.ugent.be/tutorial/mediation.html To label a parameter, include the coefficient label and an asterisk * before the variable to be labelled. E.g., y ~ b1x + b2m This would give x the label b1 and m the label b2 in the y regression. ex2MediationSyntax &lt;- &quot; #opening a quote #Regressions DietSE ~ a*BMI #Label the a coefficient in the M regression. Bulimia ~ cPrime*BMI + b*DietSE #Label the direct effect (cPrime) of X and direct effect of M (b) in the Y regression. &quot; What does this do? ex2fit &lt;- lavaan::sem(model = ex2MediationSyntax, data = labData, fixed.x=FALSE) summary(ex2fit) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 ## Bulimia ~ ## BMI (cPrm) 0.129 0.026 4.960 0.000 ## DietSE (b) -0.213 0.028 -7.725 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.955 0.037 25.875 0.000 ## .Bulimia 0.968 0.037 25.875 0.000 ## BMI 1.073 0.041 25.875 0.000 The regression coefficients have labels now! 4.4.2 Define a new term for the mediation effect a*b …using the labels we just created in ex2MediationSyntax The := operator in lavaan defines new terms to be tested: (name of a new term) := operator ex3MediationSyntax &lt;- &quot; #opening a quote #Regressions DietSE ~ a*BMI #Label the a coefficient in the M regression. Bulimia ~ cPrime*BMI + b*DietSE #Label the direct effect (cPrime) of X and direct effect of M (b) in the Y regression. #Define New Parameters ab := a*b #the product term is computed as a*b c := cPrime + ab #having defined ab, we can use this here. &quot; ex3fit &lt;- lavaan::sem(model = ex3MediationSyntax, data = labData, fixed.x=FALSE) summary(ex3fit) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 ## Bulimia ~ ## BMI (cPrm) 0.129 0.026 4.960 0.000 ## DietSE (b) -0.213 0.028 -7.725 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .DietSE 0.955 0.037 25.875 0.000 ## .Bulimia 0.968 0.037 25.875 0.000 ## BMI 1.073 0.041 25.875 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ab 0.021 0.006 3.454 0.001 ## c 0.151 0.027 5.678 0.000 Now there are two significance tests of the indirect effect ab and the total effect c! Question: why didn’t the #parameters change? Note: defining a new term is NOT equivalent to adding a new parameter! You can create as many terms as your want without changing the #parameters and the df 4.5 PART III: Summarizing Our Analysis: We can request standardized coefficients very easily by adding a statement to the summary command. summary(ex3fit, standardized = TRUE) #This includes standardized estimates. std.all contains usual regression standardization. ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 -0.100 -0.105 ## Bulimia ~ ## BMI (cPrm) 0.129 0.026 4.960 0.000 0.129 0.132 ## DietSE (b) -0.213 0.028 -7.725 0.000 -0.213 -0.205 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .DietSE 0.955 0.037 25.875 0.000 0.955 0.989 ## .Bulimia 0.968 0.037 25.875 0.000 0.968 0.935 ## BMI 1.073 0.041 25.875 0.000 1.073 1.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## ab 0.021 0.006 3.454 0.001 0.021 0.022 ## c 0.151 0.027 5.678 0.000 0.151 0.153 summary(ex3fit, ci = T) #Include confidence intervals ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 -0.150 -0.049 ## Bulimia ~ ## BMI (cPrm) 0.129 0.026 4.960 0.000 0.078 0.181 ## DietSE (b) -0.213 0.028 -7.725 0.000 -0.267 -0.159 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## .DietSE 0.955 0.037 25.875 0.000 0.882 1.027 ## .Bulimia 0.968 0.037 25.875 0.000 0.895 1.041 ## BMI 1.073 0.041 25.875 0.000 0.992 1.154 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## ab 0.021 0.006 3.454 0.001 0.009 0.033 ## c 0.151 0.027 5.678 0.000 0.099 0.203 or both! summary(ex3fit, standardized = TRUE, ci = T) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper Std.lv Std.all ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 -0.150 -0.049 -0.100 -0.105 ## Bulimia ~ ## BMI (cPrm) 0.129 0.026 4.960 0.000 0.078 0.181 0.129 0.132 ## DietSE (b) -0.213 0.028 -7.725 0.000 -0.267 -0.159 -0.213 -0.205 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper Std.lv Std.all ## .DietSE 0.955 0.037 25.875 0.000 0.882 1.027 0.955 0.989 ## .Bulimia 0.968 0.037 25.875 0.000 0.895 1.041 0.968 0.935 ## BMI 1.073 0.041 25.875 0.000 0.992 1.154 1.073 1.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper Std.lv Std.all ## ab 0.021 0.006 3.454 0.001 0.009 0.033 0.021 0.022 ## c 0.151 0.027 5.678 0.000 0.099 0.203 0.151 0.153 Important: the default significance tests of defined parameters in lavaan is Sobel’s test. 4.6 PART IV: Bootstrap confidence intervals 4.6.1 The default one is boot.ci.type = “perc” You can request bootstrap standard errors in sem() using se = “bootstrap” and bootstrap = 1000 set.seed(2022) ex3Boot &lt;- lavaan::sem(model = ex3MediationSyntax, data = labData, se = &quot;bootstrap&quot;, bootstrap = 1000, fixed.x=FALSE) This requires the full dataset - need more than the covariance matrix. se = “bootstrap” requests bootstrap standard errors. bootstrap = 1000 requests 1000 bootstrap samples. Request bootstrap CI: summary(ex3Boot, ci = TRUE) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Bootstrap ## Number of requested bootstrap draws 1000 ## Number of successful bootstrap draws 1000 ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## DietSE ~ ## BMI (a) -0.100 0.026 -3.779 0.000 -0.152 -0.048 ## Bulimia ~ ## BMI (cPrm) 0.129 0.025 5.099 0.000 0.080 0.177 ## DietSE (b) -0.213 0.027 -7.820 0.000 -0.269 -0.159 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## .DietSE 0.955 0.035 26.909 0.000 0.884 1.031 ## .Bulimia 0.968 0.038 25.378 0.000 0.890 1.041 ## BMI 1.073 0.044 24.482 0.000 0.991 1.165 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## ab 0.021 0.006 3.319 0.001 0.010 0.035 ## c 0.151 0.026 5.814 0.000 0.099 0.200 Now we have bootstrap standard error and percentile confidence interval for ab! 4.6.2 BC (bias-corrected) confidence interval What about other types of bootstrap confidence intervals? You can request a BC (bias-corrected) by adding an argument boot.ci.type = “bca.simple” to parameterEstimates(): parameterEstimates(ex3Boot, level = 0.95, boot.ci.type=&quot;bca.simple&quot;) ## lhs op rhs label est se z pvalue ci.lower ci.upper ## 1 DietSE ~ BMI a -0.100 0.026 -3.779 0.000 -0.154 -0.048 ## 2 Bulimia ~ BMI cPrime 0.129 0.025 5.099 0.000 0.076 0.176 ## 3 Bulimia ~ DietSE b -0.213 0.027 -7.820 0.000 -0.264 -0.157 ## 4 DietSE ~~ DietSE 0.955 0.035 26.909 0.000 0.888 1.035 ## 5 Bulimia ~~ Bulimia 0.968 0.038 25.378 0.000 0.898 1.045 ## 6 BMI ~~ BMI 1.073 0.044 24.482 0.000 0.990 1.165 ## 7 ab := a*b ab 0.021 0.006 3.319 0.001 0.011 0.036 ## 8 c := cPrime+ab c 0.151 0.026 5.814 0.000 0.097 0.198 which returns a 95% BCa confidence interval. This approach will yield similar results to the PROCESS Macro in SPSS with bias-corrected standard errors. 4.7 In-Class Exercise: Use Lavaan to estimate and interpret the following model ex4MediationSyntax &lt;- &quot; #Regressions DietSE ~ a*BMI #Label the a coefficient in the M regression. Risk ~ cPrime*BMI + b*DietSE #Label the direct effect (cPrime) of X and direct effect of M (b) in the Y regression. #Define New Parameters ab := a*b #the product term is computed as a*b c := cPrime + ab #having defined ab, we can use this here. &quot; ex4fit &lt;- lavaan::sem(model = ex4MediationSyntax, data = labData, fixed.x=FALSE) summary(ex4fit, ci = T) ## lavaan 0.6-10 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 1339 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## DietSE ~ ## BMI (a) -0.100 0.026 -3.861 0.000 -0.150 -0.049 ## Risk ~ ## BMI (cPrm) 0.082 0.027 3.036 0.002 0.029 0.135 ## DietSE (b) 0.083 0.029 2.902 0.004 0.027 0.139 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## .DietSE 0.955 0.037 25.875 0.000 0.882 1.027 ## .Risk 1.040 0.040 25.875 0.000 0.962 1.119 ## BMI 1.073 0.041 25.875 0.000 0.992 1.154 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ci.lower ci.upper ## ab -0.008 0.004 -2.320 0.020 -0.015 -0.001 ## c 0.074 0.027 2.738 0.006 0.021 0.127 Bootstrap confidence intervals: set.seed(2022) ex4Boot &lt;- lavaan::sem(model = ex4MediationSyntax, data = labData, se = &quot;bootstrap&quot;, bootstrap = 1000, fixed.x=FALSE) parameterEstimates(ex4Boot, level = 0.95, boot.ci.type=&quot;bca.simple&quot;) ## lhs op rhs label est se z pvalue ci.lower ci.upper ## 1 DietSE ~ BMI a -0.100 0.026 -3.779 0.000 -0.154 -0.048 ## 2 Risk ~ BMI cPrime 0.082 0.026 3.136 0.002 0.031 0.133 ## 3 Risk ~ DietSE b 0.083 0.028 2.929 0.003 0.031 0.137 ## 4 DietSE ~~ DietSE 0.955 0.035 26.909 0.000 0.888 1.035 ## 5 Risk ~~ Risk 1.040 0.040 26.248 0.000 0.970 1.123 ## 6 BMI ~~ BMI 1.073 0.044 24.482 0.000 0.990 1.165 ## 7 ab := a*b ab -0.008 0.004 -2.335 0.020 -0.018 -0.003 ## 8 c := cPrime+ab c 0.074 0.026 2.809 0.005 0.022 0.123 4.8 Exercise: Eating Disorder Mediation Analysis Give it a try before peaking the answers! Hints: Label the regression coefficients: b1 - b12; Fix all disturbance covariances at 0; Define mediation effects and total effects for each of the six mediation models using the labels; Request bootstrap standard errors using se = “bootstrap”; Print and interpret the mediation effects; (Optional) Identify and interpret the inconsistent mediation effects. I’ll get you started: 4.8.1 Step 1: Labeling and defining the parameters 4.8.2 Step 2: Fix all disturbance covariances at 0 ex5PathSyntax_noCov &lt;- &quot; #opening a quote DietSE ~ b1*BMI + b5*SelfEsteem #DietSE is predicted by BMI and SelfEsteem Bulimia ~ b10*DietSE + b2*BMI + b6*SelfEsteem Restrictive ~ b11*DietSE + b3*BMI + b7*SelfEsteem Risk ~ b12*DietSE + b4*BMI + b8*SelfEsteem + b9*Accu #Disturbance covariances (fixed at 0): DietSE ~~ 0*Bulimia # ~~ indicates a two-headed arrow (variance or covariance) DietSE ~~ 0*Restrictive # 0* in front of the 2nd variable fixes the covariance at 0 DietSE ~~ 0*Risk # These lines say that all endogenous variables have no correlated disturbance variances Bulimia ~~ 0*Restrictive Bulimia ~~ 0*Risk Restrictive ~~ 0*Risk &quot; 4.8.3 Step 3: Define new terms for mediation effects Recall: Define New Parameters ab := ab #the product term is computed as ab ex5MediationSyntax &lt;- &quot; DietSE ~ b1*BMI + b5*SelfEsteem #DietSE is predicted by BMI and SelfEsteem Bulimia ~ b10*DietSE + b2*BMI + b6*SelfEsteem Restrictive ~ b11*DietSE + b3*BMI + b7*SelfEsteem Risk ~ b12*DietSE + b4*BMI + b8*SelfEsteem + b9*Accu #Disturbance covariances (fixed at 0): DietSE ~~ 0*Bulimia # ~~ indicates a two-headed arrow (variance or covariance) DietSE ~~ 0*Restrictive # 0* in front of the 2nd variable fixes the covariance at 0 DietSE ~~ 0*Risk # These lines say that all endogenous variables have no correlated disturbance variances Bulimia ~~ 0*Restrictive Bulimia ~~ 0*Risk Restrictive ~~ 0*Risk #Define New Parameters med1 := b1*b10 total1 := b2 + med1 med2 := b1*b11 total2 := b3 + med2 med3 := b1*b12 total3 := b4 + med3 med4 := b5*b10 total4 := b6 + med4 med5 := b5*b11 total5 := b7 + med5 med6 := b5*b12 total6 := b8 + med6 &quot; ex5fit &lt;- lavaan::sem(model = ex5MediationSyntax, data = labData, fixed.x=FALSE) summary(ex5fit, ci = T) 4.8.4 Step 4: Bootstrap confidence intervals: 4.8.5 Step 5: Print and interpret the mediation effects; set.seed(2022) ex5Boot &lt;- lavaan::sem(model = ex5MediationSyntax, data = labData, se = &quot;bootstrap&quot;, bootstrap = 1000, fixed.x=FALSE) parameterEstimates(ex5Boot, level = 0.95, boot.ci.type=&quot;bca.simple&quot;) ## lhs op rhs label est se z pvalue ci.lower ci.upper ## 1 DietSE ~ BMI b1 -0.088 0.026 -3.336 0.001 -0.141 -0.036 ## 2 DietSE ~ SelfEsteem b5 0.093 0.024 3.862 0.000 0.044 0.139 ## 3 Bulimia ~ DietSE b10 -0.185 0.026 -7.001 0.000 -0.237 -0.128 ## 4 Bulimia ~ BMI b2 0.096 0.025 3.844 0.000 0.047 0.142 ## 5 Bulimia ~ SelfEsteem b6 -0.284 0.025 -11.284 0.000 -0.338 -0.237 ## 6 Restrictive ~ DietSE b11 -0.166 0.027 -6.192 0.000 -0.217 -0.109 ## 7 Restrictive ~ BMI b3 -0.154 0.025 -6.173 0.000 -0.203 -0.107 ## 8 Restrictive ~ SelfEsteem b7 -0.123 0.026 -4.668 0.000 -0.174 -0.071 ## 9 Risk ~ DietSE b12 0.102 0.027 3.737 0.000 0.050 0.157 ## 10 Risk ~ BMI b4 0.053 0.026 2.037 0.042 0.003 0.104 ## 11 Risk ~ SelfEsteem b8 -0.228 0.026 -8.654 0.000 -0.281 -0.178 ## 12 Risk ~ Accu b9 -0.095 0.028 -3.399 0.001 -0.151 -0.041 ## 13 DietSE ~~ Bulimia 0.000 0.000 NA NA 0.000 0.000 ## 14 DietSE ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 15 DietSE ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 16 Bulimia ~~ Restrictive 0.000 0.000 NA NA 0.000 0.000 ## 17 Bulimia ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 18 Restrictive ~~ Risk 0.000 0.000 NA NA 0.000 0.000 ## 19 DietSE ~~ DietSE 0.946 0.035 27.052 0.000 0.880 1.024 ## 20 Bulimia ~~ Bulimia 0.890 0.036 24.842 0.000 0.826 0.963 ## 21 Restrictive ~~ Restrictive 0.955 0.036 26.606 0.000 0.892 1.033 ## 22 Risk ~~ Risk 0.979 0.038 25.718 0.000 0.912 1.062 ## 23 BMI ~~ BMI 1.073 0.044 24.482 0.000 0.990 1.165 ## 24 BMI ~~ SelfEsteem -0.138 0.029 -4.802 0.000 -0.197 -0.083 ## 25 BMI ~~ Accu -0.021 0.027 -0.755 0.450 -0.079 0.030 ## 26 SelfEsteem ~~ SelfEsteem 1.001 0.040 25.164 0.000 0.928 1.083 ## 27 SelfEsteem ~~ Accu 0.035 0.027 1.304 0.192 -0.016 0.090 ## 28 Accu ~~ Accu 0.971 0.037 26.425 0.000 0.905 1.052 ## 29 med1 := b1*b10 med1 0.016 0.006 2.925 0.003 0.007 0.029 ## 30 total1 := b2+med1 total1 0.112 0.025 4.439 0.000 0.060 0.159 ## 31 med2 := b1*b11 med2 0.015 0.005 2.825 0.005 0.006 0.026 ## 32 total2 := b3+med2 total2 -0.139 0.025 -5.495 0.000 -0.192 -0.091 ## 33 med3 := b1*b12 med3 -0.009 0.004 -2.536 0.011 -0.018 -0.003 ## 34 total3 := b4+med3 total3 0.044 0.026 1.681 0.093 -0.005 0.096 ## 35 med4 := b5*b10 med4 -0.017 0.005 -3.399 0.001 -0.029 -0.009 ## 36 total4 := b6+med4 total4 -0.301 0.026 -11.652 0.000 -0.356 -0.253 ## 37 med5 := b5*b11 med5 -0.015 0.005 -3.238 0.001 -0.026 -0.007 ## 38 total5 := b7+med5 total5 -0.139 0.027 -5.154 0.000 -0.191 -0.085 ## 39 med6 := b5*b12 med6 0.010 0.004 2.641 0.008 0.004 0.018 ## 40 total6 := b8+med6 total6 -0.219 0.027 -8.227 0.000 -0.273 -0.168 4.8.6 Plot it! library(semPlot) semPaths(ex5Boot, what=&#39;est&#39;, rotation = 2, # default rotation = 1 with four options curve = 2, # pull covariances&#39; curves out a little nCharNodes = 0, nCharEdges = 0, # don&#39;t limit variable name lengths sizeMan = 8, # font size of manifest variable names style = &quot;lisrel&quot;, # single-headed arrows vs. # &quot;ram&quot;&#39;s 2-headed for variances edge.label.cex=1.2, curvePivot = TRUE, fade=FALSE) "]]
